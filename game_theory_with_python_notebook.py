# -*- coding: utf-8 -*-
"""game_theory_with_python_notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wWlVPlse7GuaGwhGw1m70-WWNdw_htjK

# Game Theory With Python

### Welcome to the course.
### Glad to have you onboard in this journey to explore two Game Theory packages in Python

#### Nashpy & Axelrod

#### 7 Tasks
#### 1. Create games with Nashpy
#### 2. Mixed strategies and Utilities
#### 3. Nash Equilibrium
#### 4. Games with multiple Nash Equilibria
#### 5. Zero Sum Game
#### 6. Create repeated game
#### 7. Analyze Match

## Two Player Games with Nashpy

## 1. Create 2 player games - Using Nashpy

### Consider the following Prisoner's Dilemma matrix

![picture](https://drive.google.com/uc?id=1fw7j7O8XLGQR3Rt_c9UK_PE6KgLsFeEw)
"""

# Import packages
!pip install nashpy
!pip install axelrod

import nashpy as nash
import numpy as np

# Create the payoff matrix

P1 = np.array([[8,1],[15,3]]) # P1 is the row player
P2 = np.array([[8,15],[1,3]]) # P2 is the column player
pd = nash.Game(P1,P2)
pd

"""### Exercise: Create a two player game, where,

#### I. Name players as A and B
#### II. Name the game as 'gm' and
#### III. Use the follwing matrix

![picture](https://drive.google.com/uc?id=1eHhyXZVZWQ3oPto4qcbL1EefxUsWq4bp)

"""

a=np.array([[5,17],[14,12]])
b=np.array([[15,16],[2,8]])
gm=nash.Game(a,b)
gm

"""## 2. Mixed Strategy and Utilities

### Pure Strategy:

A complete definition of how a player will play a game, it yields optimum payoff to the player.

### Mixed Strategy:

Assigns a probability to each pure strategy. This allows for a player to randomly select a pure strategy.

### Calculating Utilities:

![picture](https://drive.google.com/uc?id=1eIMuJo8w5EgJC5mLaxT9kzH8-rdQwm3_)

#### Consider the following Mixed Strategy

σr=(.2,.8) and σc=(.6,.4)
"""

# Calculate Utilities

sigma_r = np.array([.2,.8])
sigma_c = np.array([.6,.4])
pd = nash.Game(P1, P2)
pd[sigma_r, sigma_c]

"""### Validate the computation"""

#ur(σr,σc)
ur=0.2*0.6*8+0.2*0.4*1+0.8*0.6*15+0.8*0.4*3
ur

#uc(σr,σc)
uc=0.2*0.6*8+0.2*0.4*15+0.8*0.6*1+0.8*0.4*3
uc

"""### Exercise: Calculate the utilities of the game 'gm' created in the previous exercise, using
#### σr=(.3,.7) and σc=(.5,.5)
"""

r=np.array([.3,.7])
c=np.array([.5,.5])
gm=nash.Game(a,b)
gm[r,c]

"""## 3. The Nash Equilibrium

Strict and unique Nash Equilibrium

![picture](https://drive.google.com/uc?id=1_B9Wk5Sb1jwK1AADXR1xj9n0tmALNykM)
"""

# Find the Nash Equilibrium with Support Enumeration

equilibria = pd.support_enumeration()
for eq in equilibria:
  print(eq)

"""#### Both solutions match

### Exercise: Find out the Nash Equilibrium for gm
"""

equilibria = gm.support_enumeration()
for eq in equilibria:
  print(eq)

"""## 4. Games with Multiple Nash Equilibria

### Hawk - Dove Game

![picture](https://drive.google.com/uc?id=1b8kKho3qu1s5b7Qriq6NYWqJxd5uKI6x)
"""

P3 =  np.array([[3,1 ],[4,0]])# P3 is the row player
P4 =  np.array([[3,4],[1,0]]) # P4 is the column player
hd = nash.Game(P3,P4)

hd

"""#### Nash Equilibria

![picture](https://drive.google.com/uc?id=1JJxdwZ3y6U_hxMH-0l4i6LpuuTVhF5w0)

"""

equilibria = hd.support_enumeration()
for eq in equilibria:
  print(eq)

"""Sol. (D,H)

P3 : D = 1, H = 0

P4 : D = 0, H = 1

Sol. (H,D)

P3 : D = 0, H = 1

P4 : D = 1, H = 0

Sol. (D,D) or (H,H)

P3 : D = 0.5, H = 0.5

P4 : D = 0.5, H = 0.5

### Exercise: Find out the number of NE for the following matrix
#### Players: M and N
#### Name of game mn


![picture](https://drive.google.com/uc?id=1mAeVXw3qHTyzEx4kgMsOlyrP6rJvpKlN)
"""

import numpy as np
import nashpy as nash
m= np.array([[1,1,3,2],[2,3,4,3],[5,1,4,1]])
n=np.array([[3,2,2,4],[1,4,2,0],[3,3,2,3]])
mn=nash.Game(m,n)
mn



"""![picture](https://drive.google.com/uc?id=11UeEgrEh4VYWYAMwyvwLVGZlHT7On2Eo)

## 5. Zero Sum Game

Matching the pennies game

![picture](https://drive.google.com/uc?id=1DJhLFiRbUah8Cvku03oGP5C2eFuDPxBQ)
"""

P5 =np.array([[1,-1],[-1,1]])
mp =nash.Game(P5)
mp

equilibria =mp.support_enumeration()
for eq in equilibria:
  print(eq)

"""### Exercise: Find out the solution for the following zero sum game 'zs'
#### Use payoff matrix - np.array([[5, -6.5], [-2.5, 7]])
#### For players Z1 and Z2
"""

z1=np.array([[5, -6.5], [-2.5, 7]])
z2=nash.Game(z1)
z2

equilibria =z2.support_enumeration()
for eq in equilibria:
  print(eq)

"""## Two Player-Repeated Games with Axelrod

## 6. Create repeated game
"""

#!pip install -U pyYAML     # Troubleshoot: Execute this line if Axelrod does not run and AttributeError: module 'yaml' has no attribute 'FullLoader' occurs

# Import package

import axelrod as axl

# Create matches

players = (axl.Cooperator(),axl.Alternator())                  # using players of Cooperator and Alternator strategy
match1 =  axl.Match(players,turns=5)                           # play for 5 turns
match1.play()

axl.all_strategies

"""### Exercise: Create a repeated game with 2 players having:
#### I. TitForTat and Random Strategy
#### II. Name it as match2
#### III. Run it for 15 turns
"""

players=(axl.TitForTat(),axl.Random())
match2=axl.Match(players,turns=15)
match2.play()

"""## 7. Analyze Match"""

# Payoffs

match1.game        #Analyze the match

#These payoffs are commonly referred to as:

#R: the Reward payoff (default value in the library: 3) C-C
#P: the Punishment payoff (default value in the library: 1) D-D
#S: the Loss payoff (default value in the library: 0) C-D
#T: the Temptation payoff (default value in the library: 5) D-C

# Scores of a match

match1.scores()     #Retrieve match scores

# The result of the match can also be viewed as sparklines where cooperation is shown as a solid block and defection as a space.

print (match1.sparklines()) # Get output using sparklines

"""### Exercise: Analyze match2.
#### Find the score and create the sparklines
"""

print(match2.sparklines())

match2.scores()

"""#### References:

Package Documentations

https://nashpy.readthedocs.io/en/stable/index.html#

https://axelrod.readthedocs.io/en/stable/#
"""